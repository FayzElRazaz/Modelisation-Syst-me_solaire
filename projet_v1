# -*- coding: utf-8 -*-
"""
Created on Sat Mar 12 11:12:21 2022

@author: Fayz El Razaz
"""

###########   BIBLIOTHEQUES

import numpy as np
import matplotlib.pyplot as plt
import time

start = time.time()
###########   PARAMETRES

#Fonction distance euclidienne
def distance(x,y):
    if(len(x) != len(y)):
        print("Les vecteurs ne sont pas de même longueurs")
        return 0
    n = len(x)
    d = 0
    for i in range(n):
        d = d + (x[i]-y[i])**2    
    return np.sqrt(d)    
    
def deriv(t,y,params):
    dy = np.empty(4)
    dy[0] = y[2]
    dy[1] = y[3]
    dy[2] = params[0]*params[2]/(distance(params[3],params[4])**3)*(y[1]-y[0])
    dy[3] = params[0]*params[1]/(distance(params[3],params[4])**3)*(y[0]-y[1])
    return dy

def rk4(x, dx, y, deriv,params):

    #  /* d1, d2, d3, d4 = estimations des derivees
    #    yp = estimations intermediaires des fonctions */  
    ddx = dx/2.       #         /* demi-pas */
    d1 = deriv(x,y,params)   #       /* 1ere estimation */          
    yp = y + d1*ddx
    #    for  i in range(n):
    #        yp[i] = y[i] + d1[i]*ddx
    d2 = deriv(x+ddx,yp,params)     #/* 2eme estimat. (1/2 pas) */
    yp = y + d2*ddx    
    d3 = deriv(x+ddx,yp,params)  #/* 3eme estimat. (1/2 pas) */
    yp = y + d3*dx    
    d4 = deriv(x+dx,yp,params)     #  /* 4eme estimat. (1 pas) */
    #/* estimation de y pour le pas suivant en utilisant
    #  une moyenne ponderee des derivees en remarquant
    #  que : 1/6 + 1/3 + 1/3 + 1/6 = 1 */
    return y + dx*( d1 + 2*d2 + 2*d3 + d4 )/6  
    
T = 100000

x_terre = np.empty(T)
vx_terre = np.empty(T) 
x_soleil= np.empty(T)
vx_soleil = np.empty(T)

y_terre = np.empty(T)
vy_terre = np.empty(T)
y_soleil = np.empty(T)
vy_soleil = np.empty(T)

x = np.empty(4)
y = np.empty(4)
delta_t = 0.05

G = 6.67408*10**(-11)

#G=1
m_terre = 5.972*10**(24)
m_soleil = 1.988*10**(30)

#valeurs initiales - calcul pour les coordonées X

x[0] = 0  #coordonnée x initiale pour la terre
x[1] = 150000000  #coordonnée x initiale pour le soleil
x[2] = 0  #coordonné x de la vitesse initiale de la terre v_x_terre[0]
x[3] = 0  #coordonné x de la vitesse initiale du soleil v_x_soleil[0]

y[0] = 0  #coordonné y initiale de la terre
y[1] = 0  #coordonné y initiale du soeil 
y[2] = 1000  #coordonné y de la vitesse initiale de la terre v_y_terre[0]
y[3] = 0  #coordonné y de la vitesse initiale du soleil v_y_soleil[0]

###########   CODE
Tps=np.arange(T)

for t in Tps:
    r_terre = np.array([x[0],y[0]])
    r_soleil = np.array([x[1],y[1]])
    pms = [G,m_terre,m_soleil,r_terre,r_soleil]

    x_terre[t] = x[0]
    x_soleil[t] = x[1]
    vx_terre[t] = x[2]
    vx_soleil[t] = x[3]
    x = rk4(t,delta_t,x,deriv,pms)
    
    y_terre[t] = y[0]
    y_soleil[t] = y[1]
    vy_terre[t] = y[2]
    vy_soleil[t] = y[3]
    y = rk4(t,delta_t,y,deriv,pms)

x_terre
y_terre
x_soleil

###########   GRAPHIQUES

fig1 = plt.figure(figsize=(6, 3), dpi=150)
plt.xlabel('abscisse')
plt.ylabel("ordonné")
plt.title("Trajectoire terre")
plt.plot(x_terre,y_terre, label = "Trajectoire")


