# -*- coding: utf-8 -*-
"""
Created on Sun Mar 13 18:29:19 2022

@author: FaYzerR
"""
#			d_r3 = (dx**2 + dy**2 + dz**2 + theta**2)**(-1.5)

import numpy as np
import matplotlib.pyplot as plt

#Calcul de la force
def A(r,m,G):
    N = r.shape[0]
    a = np.zeros((N,3))
    dx=dy=dz=0
    for i in range(N):
        for j in range(N):
            if (j==i):
                continue
            else:
                dx = r[j,0]-r[i,0]
                dy = r[j,1]-r[i,1]
                dz = r[j,2]-r[i,2]
                d = (dx**2+dy**2+dz**2)**(-1.5)
                a[i,0] += G*dx*d*m[j]
                a[i,1] += G*dy*d*m[j]
                a[i,2] += G*dz*d*m[j]
    return a

#Initialisation random des coordonnées, utile pour les système avec beaucoup de particules
def init_coord():
    return np.random.normal(0,1,3)

N = 3

r = np.empty([N,3])
v = np.empty([N,3])
a = np.zeros([N,3])

#Cas où tous les corps ont même masse
#m = np.ones(N)
#Cas où les poids sont réparties de façon aléatoires
#Poids respectifs du soleil, de la terre et de la lune
m = np.array([1.989E+30,5.972E+24,7.342E+22]) 

#Remplissage initial aléatoire
# for i in range(r.shape[0]):
#     r[i] = init_coord()
# for i in range(v.shape[0]):
#     v[i] = init_coord()

r[0,:] = np.array([0,0,0]) #Coordonnées soleil
r[1,:] = np.array([-1.492107302174159E+08,-2.033696924730195E+07,2.993765246242471E+04]) #Coordonnées terre
r[2,:] = np.array([-1.488965346084017E+08,-2.054043151982423E+07,-3.609859317591414E+03]) #Coordonnées lune

v[0,:] = np.array([0,0,0]) #Vitesse soleil
v[1,:] = np.array([3.144176010978470E+05,-2.560860397868225E+06,1.413888044469161E+02]) #Vitesse terre
v[2,:] = np.array([3.656255311799980E+05,-2.486288805256289E+06,4.718846490831595E+02]) #Vitesse lune

T= 50
dt = 1
G = 6.67408*10**(-11)*10**(-9)*7464960000 #constante de gravité passée de m^3*kg^-1*s^-2 à km^3*kg^-1*J^-2 où J correpond à jours
t = 0

POS = np.empty([N,3,T])
#Saute mouton - leapfrog
for i in range(T):
    POS[:,0,i] = r[:,0]
    POS[:,1,i] = r[:,1]
    POS[:,2,i] = r[:,2]
    v = v+a*dt/2.0
    r = r+dt*v
    a = A(r,m,G)
    v = v+dt/2.0*a
    t = t+dt
    
#POS[1,1,0]
ax = plt.axes(projection='3d')
#plt.xlim(-1E+09,1E+09)
#plt.ylim(-1E+09,1E+09)

# p = 10
# for i in range(0,T,p):
#     ax = plt.axes(projection='3d')
#     ax.set_zlim(-30000,30000)
#     plt.xlim(-1E+08,1E+08)
#     plt.ylim(-3E+08,3E+08)
#     #plt.zlim(-50000,50000)
#     for j in range(p):
#         plt.plot(POS[0,0,i+j],POS[0,1,i+j], POS[0,2,i+j],marker = "o", color="yellow")
#         plt.plot(POS[1,0,i+j],POS[1,1,i+j], POS[1,2,i+j],marker = "o", color="blue")
#         plt.plot(POS[2,0,i+j],POS[2,1,i+j], POS[2,2,i+j],linestyle = 'o', color="grey")        
#         plt.pause(0.000001) 
#     plt.clf()    
    
for i in range(T):
    plt.plot(POS[0,0,i],POS[0,1,i], POS[0,2,i],marker = "o", color="yellow", markersize = 40)
    plt.plot(POS[1,0,i],POS[1,1,i], POS[1,2,i],marker = "o", color="blue", markersize = 10)
    plt.plot(POS[2,0,i],POS[2,1,i], POS[2,2,i],marker = 'o', color="grey", markersize = 5)        
    plt.pause(0.000001) 


    
    
    
    
    
